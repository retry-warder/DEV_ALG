class Graph:
    def __init__(self, g):
        self._graf = g
        self._obr_graf = [[] for _ in range(len(g))]
        for v, adj_lst in enumerate(self._graf):
            for av in adj_lst:
                self._obr_graf[av].append(v)

    def kosaraju(self):
        visited = [False] * len(self._graf)
        q = []
        comp = [None] * len(self._graf)
        for v in range(len(self._graf)):
            if not visited[v] is True:
                self._dfs_1(self._obr_graf, v, visited, q)
        x = 1
        while q:
            v = q.pop()
            if comp[v] is None:
                self._dfs_2(self._graf, v, comp, x)
                x += 1
            comp[v] = x
        return comp

    @staticmethod
    def _dfs_1(g, v, visited, stack):
        visited[v] = True
        for u in g[v]:
            if visited[u] is True:
                continue
            Graph._dfs_1(g, u, visited, stack)
        stack.append(v)

    @staticmethod
    def _dfs_2(g, v, comp, x):
        comp[v] = x
        for u in g[v]:
            if comp[u] is None:
                Graph._dfs_2(g, u, comp, x)

if __name__ == '__main__':
    G = Graph([[1], [2, 3], [0], [4], [5], [3], [5, 7], [8], [9], [6], [9]])
    _comp = G.kosaraju()
    print(_comp)
    G = Graph([[1, 2, 3], [0, 3, 4], [0, 3], [0, 1, 2, 4], [1, 3]])
    _comp = G.kosaraju()
    print(_comp)
